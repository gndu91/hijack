#!/bin/bash

function make_oldconfig () {
	rm -f .config 2>/dev/null
	cp -f arch/arm/def-configs/$1 arch/arm/defconfig \
	&& ( echo | make oldconfig )
}

function make_diffs () {
	make mrproper \
	&& cd .. \
	&& echo "Running diff.." \
	&& diff -u --recursive --new-file --exclude=zImage --exclude=config.ini --exclude=.\* --exclude=\*.patch --exclude=\*.patch.gz --exclude=${0##*/} --exclude=defconfig $FROMDIFF/ $KDIR/ |gzip -9 - >${KDIR}/${PATCHFILE}
	cd -
	echo "Created ${1}$PATCHFILE"
}

function check_REL () {
	if [ "$REL" = "" ]; then
		echo "You forgot to specify a release name; eg. v15"
		exit 1
	fi
	NEWVERS=${REL##v}
	let "OLDVERS = NEWVERS - 1"
	let "OLDER = OLDVERS - 1"
	OLDER="v${OLDER}"
	FROMDIFF="v${OLDVERS}"
	if [ ! -d "../${FROMDIFF}" ]; then
		echo "Previous version ${FROMDIFF} not found (needed for patch generation)"
		oldpatch="../patches/relative/${OLDER}-${FROMDIFF}.patch.gz"
		echo "Looking for ../${OLDER} and ${oldpatch}"
		if [ -d "../${OLDER}" ]; then
			if [ -f "${oldpatch}" ]; then
				echo "Attempting to patch ../${OLDER}: "
				gunzip - < "${oldpatch}" | ( cd "../${OLDER}" && patch -p1 && cd - && mv "../${OLDER}" "../${FROMDIFF}" )
			fi
		fi
		if [ ! -d "../${FROMDIFF}" ]; then
			exit 1;
		fi
		echo
		echo "Success.. now proceeding with build of ${REL}"
		echo
	fi
	PATCHFILE=${FROMDIFF}-${REL}.patch.gz
}

SERIAL=/dev/serial1
#SERIAL=/dev/rfcomm1
SERIAL=/dev/rfcomm0
#[ -e /dev/rfcomm0 ] && SERIAL=/dev/rfcomm0
#SERIAL=/dev/ttyUSB0
DOWNLOAD=../../download
ZIMAGE=arch/arm/boot/zImage
export PATH="/usr/local/armtools-empeg/bin:$PATH"
KDIR=${PWD##*/}
FROMDIFF="vXXX"

if [ "$1" = "install" ]; then
	REL=$2
	check_REL
	if [ ! -d /zippy/html ]; then
		mount /zippy
	fi
	if [ -f $PATCHFILE ]; then
		if [ -d ../patches/relative ]; then
			cp -a $PATCHFILE ../patches/relative
		fi
		mv -f $PATCHFILE /zippy/html/empeg.hidden/patches/relative/
	fi
	mv -f $REL.* /zippy/html/empeg.hidden/ 2>/dev/null
	chown httpd:httpd /zippy/html/empeg.hidden/$REL.*
	chmod a-x /zippy/html/empeg.hidden/$REL.*
	cd /zippy/html/empeg.hidden/ \
	&& awk -v REL=$REL -v PATCH=${PATCHFILE} '
		function dosub(pattern,file,line  ,ls,t,f) {
			if (line ~ pattern) {
				gsub(pattern,file,line);
				ls = "/bin/ls -l "file " 2>/dev/null";
				ls | getline t;
				close(ls);
				## -rw-r--r-- 1 httpd httpd 491012 2006-10-27 09:26 v465.hijack.mk2.zImage
				if (split(t,f) == 8) {
					sub("[<]/[aA][>].*","</A><TD>"f[5]" bytes<TD><FONT SIZE=-1>"f[6]" "f[7]"</FONT>",line);
				}
			}
			return line;
		}
		#main()
		{
			line = dosub("v[0-9]*[.][^\"]*[.]mk1[.]zImage",REL".hijack.mk1.zImage",$0);
			line = dosub("v[0-9]*[.][^\"]*[.]mk2[.]zImage",REL".hijack.mk2.zImage",line);
			if (found_it && line ~ "patches/relative/") {
				found_it = 0;
				if (!(line ~ "patches/relative/"PATCH)) {
					pvers = gensub(".patch.gz$", "", 1, PATCH);
					print "<TR><TD><a href=\"patches/relative/"PATCH"\">"pvers"</a><TD>";
				}
			}
			if (line ~ "^....Relative patches and Revision History") {
				found_it = 1;
			}
			print line;
		}' < index.html >index.html.new \
	&& mv index.html.new index.html \
	&& echo "## newest version for auto-update installers" >NEWEST_VERSION.tmp \
	&& echo "${REL}.hijack.mk1.zImage" >>NEWEST_VERSION.tmp \
	&& echo "${REL}.hijack.mk2.zImage" >>NEWEST_VERSION.tmp \
	&& mv NEWEST_VERSION.tmp NEWEST_VERSION \
	&& cd - \
	&& echo 'All Done.  Success!'
elif [ "$1" = "release" ]; then
	REL=$2
	check_REL
	rm -f $REL.*.zImage $REL.*.map $PATCHFILE >/dev/null 2>&1
	sed -e "/^EXTRAVERSION/s/-hijack.*/-hijack-$REL/" <Makefile >Makefile.tmp && mv -f Makefile.tmp Makefile
	make_diffs
	make_oldconfig empeg-car1 && make dep && make clean && make -j2 zImage && make zImage \
	&& mv -f $ZIMAGE $REL.hijack.mk1.zImage \
	&& mv -f System.map $REL.hijack.mk1.map \
	&& make mrproper \
	&& make_oldconfig empeg-car2 && make dep && make clean && make -j2 zImage && make zImage \
	&& cp -f $ZIMAGE $REL.hijack.mk2.zImage \
	&& mv -f System.map $REL.hijack.mk2.map \
	&& chmod a-x *.zImage \
	&& echo 'All Done.  Success!'
elif [ "$1" = "clean" ]; then
	make mrproper
elif [ "$1" = "download" ]; then
	image=""
	if [ -f $ZIMAGE ]; then
		image=$ZIMAGE
	elif [ -f "v[0-9]*.hijack.mk2.zImage" ]; then
		image="v[0-9]*.hijack.mk2.zImage"
	fi
	if [ "$image" = "" ]; then
		echo "zImage not found"
		exit 1
	fi
	if [ "$SERIAL" = "/dev/rfcomm" ]; then
		SERIAL=`echo /dev/rfcomm* | awk '{print $NF ; exit}'`
		if [ "$SERIAL" = "/dev/rfcomm*" ]; then
			rfcomm bind all
			sleep 2;
			SERIAL=`echo /dev/rfcomm* | awk '{print $NF ; exit}'`
		fi
	fi
echo "SERIAL=$SERIAL"
	${DOWNLOAD} ${image} 10000 ${SERIAL}
elif [ "$1" = "flash" ]; then
	image=""
	IP="$2"
	if [ "$IP" = "" ]; then
		IP=10.0.0.26
	fi
		
	if [ -f $ZIMAGE ]; then
		image=$ZIMAGE
	elif [ -f "v[0-9]*.hijack.*.mk2.zImage" ]; then
		image="v[0-9]*.hijack.*.mk2.zImage"
	fi
	if [ "$image" = "" ]; then
		echo "zImage not found"
		exit 1
	fi
	rm -f /tmp/junk 2>/dev/null
	ping -c1 -w1 $IP &>/dev/null
	if [ ping -c1 -w1 $IP &>/dev/null ]; then
		echo "No response from $IP"
		exit 1
	fi
	echo "Sending kernel.."
	ftp -n >/dev/null <<-EOF
		open $IP

		#passive
		binary
		site popup 99 Downloading kernel..
		put $ZIMAGE /proc/empeg_kernel
		site popup 99 Waiting for readback..
		get /proc/empeg_kernel /tmp/junk
		site popup 0 Done.
		quit
		EOF
	bytes=`ls -l $ZIMAGE|awk '{print $5}'`
	dd if=/tmp/junk bs=$bytes count=1 2>/dev/null | diff $ZIMAGE -
	if [ "$?" = "0" ]; then
		echo "Success!"
	else
		echo "FAILED -- try again!"
		exit 1
	fi
	rm -f /tmp/junk 2>/dev/null
	echo "Rebooting.."
	ftp >/dev/null <<-EOF
		open $IP

		site reboot
		EOF

elif [ -f .config ]; then
	exec make zImage
else
	make mrproper && make_oldconfig empeg-car2 && make dep && make clean && make -j2 zImage && make zImage
fi
